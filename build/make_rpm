#!/usr/bin/env python
import os
import sys
import subprocess
from make_util import parse_argments


def docker_exec_cmd(docker_exec, inside_cmd):
    cmd = docker_exec + inside_cmd
    print(" ".join(cmd))
    p = subprocess.Popen(cmd,
                         stdout=subprocess.PIPE,
                         stderr=sys.stderr)
    stdout, stderr = p.communicate()
    exit_code = p.poll()
    if exit_code != 0:
        raise Exception(" ".join(cmd) +
                        "exited with code {0}".format(exit_code))


def main():
    config = parse_argments(verbose=True)
    if not os.path.exists(config.rpm_dir):
        os.makedirs(config.rpm_dir)

    docker_exec_cmd(config.docker_exec,
                    ['rpmdev-setuptree'])
    docker_exec_cmd(config.docker_exec,
                    ['tar', '--transform',
                     "s/build/{0}-{1}/".format(config.package, config.version),
                     '-cvzf',
                     '{0}/SOURCES/{1}-{2}.tar.gz'.format(config.rpm_root,
                                                         config.package,
                                                         config.version),
                     '/build'])
    docker_exec_cmd(config.docker_exec,
                    ['rpmbuild', '-bb',
                     '--define', 'packagename {0}'.format(config.package),
                     '--define', 'version {0}'.format(config.version),
                     '--define', 'irodsversion {0}'.format(config.irods_version),
                     '/build/{0}.spec'.format(config.package)])
    docker_exec_cmd(config.docker_exec,
                    ['install',
                     '-o', str(os.getuid()),
                     '-g', str(os.getgid()),
                     '{0}/RPMS/x86_64/{1}.rpm'.format(config.rpm_root,
                                                      config.rpm_package),
                     '{0}/{1}.rpm'.format(config.rpm_dir_inside,
                                          config.rpm_package)])


if __name__ == '__main__':
    main()
